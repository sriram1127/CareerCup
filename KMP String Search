class Solution {
    public int strStr(String haystack, String needle) {
        return KMPStringSearch(haystack, needle);
    }
    private int KMPStringSearch(String s1, String s2){
        if(s1 == null || s2 == null)
            return -1;
        if(s2.length() == 0 || s1.equals(s2))
            return 0;
        if(s2.length() == 1)
            return s1.indexOf(s2);
        int[] psArray = getPSArray(s2);
        int i=0;
        int j=0;
        while(i < s1.length() && j < s2.length()){
            if(s1.charAt(i) == s2.charAt(j)){
                i++;
                j++;
            }else{
                while(s2.charAt(j) != s1.charAt(i) && j!=0){
                    j = psArray[j-1];
                }
                if(s2.charAt(j) == s1.charAt(i)){
                    ++j;
                    ++i;
                }else{
                    ++i;
                }
            }
        }
        if(j == s2.length())
            return i - s2.length();
        else
            return -1;
    }

    private int[] getPSArray(String s){
    	int[] a = new int[s.length()];
    	int i =0;
    	int j =1;
    	while(j < s.length()){
    		if(s.charAt(i) == s.charAt(j)){
    			a[j] = i + 1;
    			i++;
    			j++;
    		}else{
    			while(s.charAt(i) != s.charAt(j) && i != 0){
    				i = a[i-1];
    			}
    			if (i == 0) {
					if (s.charAt(i) == s.charAt(j)) {
						a[j] = 1;
						i++;
					} else{
						a[j] = 0;
                    }
                }
				else {
					a[j] = i + 1;
                }
				j++;
    		}
    	}
    	return a;
    }
}
